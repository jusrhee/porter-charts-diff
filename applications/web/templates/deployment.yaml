apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "docker-template.fullname" . }}
  labels:
    {{- include "docker-template.labels" . | nindent 4 }}
    tags.datadoghq.com/env: {{ .Values.datadog.env }}
    tags.datadoghq.com/service: {{ .Values.datadog.service }}
    tags.datadoghq.com/version: "{{ .Values.image.tag }}"
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{ end }}
  selector:
    matchLabels:
      {{- include "docker-template.selectorLabels" . | nindent 6 }}
  strategy:
    {{- toYaml .Values.updateStrategy | nindent 4 }}
  template:
    metadata:
      annotations:
        helm.sh/revision: {{ .Release.Revision | quote }}
        {{- with .Values.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if and (contains "puma" .Values.container.command) (contains "--control-url" .Values.container.command)}}
        {{- $pumaport := regexFind "--control-url tcp://([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\:([0-9]{1,4})" .Values.container.command | split ":"}}
        ad.datadoghq.com/{{ .Chart.Name }}.check_names: '["puma"]'
        ad.datadoghq.com/{{ .Chart.Name }}.init_configs: "[{}]"
        ad.datadoghq.com/{{ .Chart.Name }}.instances: |
          [
            {
              "control_url": "http://%%host%%:{{ $pumaport._2 }}/stats?token=%%env_puma_control_token%%"
            }
          ]
        {{- end }}
      labels:
        {{- include "docker-template.selectorLabels" . | nindent 8 }}
        {{- .Values.podLabels | toYaml | nindent 8 }}
        tags.datadoghq.com/env: {{ .Values.datadog.env }}
        tags.datadoghq.com/service: {{ .Values.datadog.service }}
        tags.datadoghq.com/version: "{{ .Values.image.tag }}"
        {{- if ((.Values.sidekiq).ui).enabled }}
        extras.carerev.com/sidekiq: "true"
        {{- end }}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                      - {{ include "docker-template.name" . }}
                    - key: app.kubernetes.io/instance
                      operator: In
                      values:
                      - {{ .Release.Name }}
                topologyKey: failure-domain.beta.kubernetes.io/zone
              weight: 100
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                      - {{ include "docker-template.name" . }}
                    - key: app.kubernetes.io/instance
                      operator: In
                      values:
                      - {{ .Release.Name }}
                topologyKey: kubernetes.io/hostname
              weight: 100
      serviceAccountName: {{ include "docker-template.serviceAccountName" . }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
      {{- range .Values.volumes.emptyDir }}
        - name: {{ .name }}
          emptyDir: {}
      {{- end }}
      {{- if ((.Values.sidekiq).ui).enabled }}
        - name: sidekiq-ui-auth
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "{{ include "docker-template.fullname" . }}-sidekiq-ui-auth"
      {{- end }}
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      initContainers:
        - name: emptydir-remove-other-permissions
          image: busybox
          command:
            - /bin/chmod
            - +t
          {{- range $emptyDirs := .Values.volumes.emptyDir }}
            {{- range $emptyDirs.mountPaths }}
            - {{ . }}
            {{- end }}
          {{- end }}
          securityContext:
            runAsUser: 0
            privileged: true
            runAsNonRoot: false
          volumeMounts:
          {{- range $emptyDirs := .Values.volumes.emptyDir }}
            {{- range $emptyDirs.mountPaths }}
            - name: {{ $emptyDirs.name }}
              mountPath: {{ . }}
            {{- end }}
          {{- end }}
        - name: istio-init
          image: auto
          resources:
          {{- toYaml .Values.istio.init.resources | nindent 12 }}
      containers:
        - name: istio-proxy
          image: auto
          resources:
          {{- toYaml .Values.istio.sidecar.resources | nindent 12 }}
          {{- if ((.Values.sidekiq).ui).enabled }}
          volumeMounts:
          - name: sidekiq-ui-auth
            readOnly: true
            mountPath: /etc/istio/config/sidekiq-ui/
          {{- end }}
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 20; curl -X POST localhost:15000/drain_listeners?inboundonly; while [ $(netstat -plunt | grep tcp | grep -v envoy | grep -v pilot-agent | wc -l | xargs) -ne 0 ]; do sleep 1; done"]
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if and .Values.container.command (not (or (eq .Values.image.repository "porterdev/hello-porter") (eq .Values.image.repository "public.ecr.aws/o1j4x7p4/hello-porter"))) }}
          command:
          {{- range $command := trim .Values.container.command | splitList " " }}
          - {{ $command | quote }}
          {{- end }}
          {{- if .Values.container.args }}
          args:
          {{- range $args := trim .Values.container.args | splitList " " }}
          - {{ $args | quote }}
          {{- end }}
          {{- end }}
          {{- end }}
          volumeMounts:
          {{- range $emptyDirs := .Values.volumes.emptyDir }}
            {{- range $emptyDirs.mountPaths }}
            - name: {{ $emptyDirs.name }}
              mountPath: {{ . }}
            {{- end }}
          {{- end }}
          {{- if or (.Values.container.lifecycle.postStart) (.Values.container.lifecycle.preStop) }}
          lifecycle:
            {{- if .Values.container.lifecycle.postStart }}
            postStart:
              exec:
                command:
                {{- range $command := trim .Values.container.lifecycle.postStart | splitList " " }}
                - {{ $command | quote }}
                {{- end }}
            {{- end }}
            {{- if .Values.container.lifecycle.preStop }}
            preStop:
              exec:
                command:
                {{- range $command := trim .Values.container.lifecycle.preStop | splitList " " }}
                - {{ $command | quote }}
                {{- end }}
            {{- end }}
          {{- end }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          ports:
            - name: http
              containerPort: {{ .Values.container.port }}
              protocol: TCP
            {{- range .Values.container.extraPorts }}
            - name: {{ .name }}
              containerPort: {{ .containerPort }}
              protocol: TCP
            {{- end }}
          {{ if .Values.health.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.health.livenessProbe.path }}
              scheme: {{ .Values.health.livenessProbe.scheme }}
              port: {{ .Values.health.livenessProbe.port }}
              {{ if .Values.health.livenessProbe.auth.enabled }}
              httpHeaders:
                - name: Authorization
                  value: Basic {{ printf "%s:%s" .Values.health.livenessProbe.auth.username .Values.health.livenessProbe.auth.password | b64enc }}
              {{ end }}
            periodSeconds: {{ .Values.health.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.health.livenessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.health.livenessProbe.timeoutSeconds }}
          {{ end }}
          {{ if .Values.health.livenessCommand.enabled }}
          livenessProbe:
            exec:
              command:
                {{- range $command := trim .Values.health.livenessCommand.command | splitList " " }}
                - {{ $command | quote }}
                {{- end }}
            initialDelaySeconds: {{ .Values.health.livenessCommand.initialDelaySeconds }}
            periodSeconds: {{ .Values.health.livenessCommand.periodSeconds }}
          {{ end }}
          {{ if .Values.health.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.health.readinessProbe.path }}
              scheme: {{ .Values.health.readinessProbe.scheme }}
              port: {{ .Values.health.readinessProbe.port }}
              {{ if .Values.health.readinessProbe.auth.enabled }}
              httpHeaders:
                - name: Authorization
                  value: Basic {{ printf "%s:%s" .Values.health.readinessProbe.auth.username .Values.health.readinessProbe.auth.password | b64enc }}
              {{ end }}
            periodSeconds: {{ .Values.health.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.health.readinessProbe.timeoutSeconds }}
          {{ end }}
          {{ if .Values.health.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: {{ .Values.health.startupProbe.path }}
              scheme: {{ .Values.health.startupProbe.scheme }}
              port: {{ .Values.health.startupProbe.port }}
              {{ if .Values.health.startupProbe.auth.enabled }}
              httpHeaders:
                - name: Authorization
                  value: Basic {{ printf "%s:%s" .Values.health.startupProbe.auth.username .Values.health.startupProbe.auth.password | b64enc }}
              {{ end }}
            periodSeconds: {{ .Values.health.startupProbe.periodSeconds }}
            failureThreshold: {{ .Values.health.startupProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.health.startupProbe.timeoutSeconds }}
          {{ end }}
          resources:
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }}
            limits:
              memory: {{ ((.Values.resources).limits).memory | default .Values.resources.requests.memory }}
              {{- if ((.Values.resources).limits).cpu }}
              cpu: {{ .Values.resources.limits.cpu }}
              {{- end }}
          env:
            # Porter default environment variables
            - name: PORTER_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: PORTER_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: PORTER_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: PORTER_POD_IMAGE_TAG
              value: "{{ .Values.image.tag }}"
            - name: PORTER_POD_REVISION
              value: "{{ .Release.Revision }}"
            {{- range $key, $val := .Values.container.env.normal }}
            - name: {{ $key }}
            {{- $splVal := split "_" $val -}}
            {{- if and (len $splVal | eq 2) (eq $splVal._0 "PORTERSECRET") }}
              valueFrom:
                secretKeyRef:
                  name: {{ $splVal._1 }}
                  key: {{ $key }}
            {{- else }}
              value: {{ quote $val }}
            {{- end }}
            {{- end }}
            {{- range $syncedEnv := .Values.container.env.synced }}
            {{- range $key := $syncedEnv.keys }}
            - name: {{ $key.name }}
              {{- if $key.secret }}
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s.v%d" $syncedEnv.name ($syncedEnv.version | int) }}
                  key: {{ $key.name }}
              {{- else }}
              valueFrom:
                configMapKeyRef:
                  name: {{ printf "%s.v%d" $syncedEnv.name ($syncedEnv.version | int) }}
                  key: {{ $key.name }}
              {{- end }}
            {{- end }}
            {{- end }}
            - name: PORT
              value: {{ .Values.container.port | quote }}
      {{- if gt (len .Values.nodeSelector) 0}}
      nodeSelector:
        {{- range $k, $v := .Values.nodeSelector }}
        {{ $k }}: {{ $v }}
        {{- end }}
      {{- end }}
